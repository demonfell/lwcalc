Observations on modelling the combat results table

{ 'combat.ratio': {0 : 4 : (6,3)}}

- even and odd numbers share a set of damage values - if not 0, "round up" (?)

#1st attempt to visualize
         1  2  3  4  5  6  7  8   9   0
- 0 - E: 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 
      L: 5, 4, 5, 3, 2, 2, 1, 0, 0, 0 

- 1 - E: 4, 5, 6, 7, 8, 9, 10, 11, 12, 14
      L: 5, 4, 3, 3, 2, 2, 1, 0, 0, 0

- 3 - E: 5, 6, 7, 8,  
      L:       

***
#2nd attempt to visualize
#Format is E:L

    1     2    3    4    5    6     7    8     9     0
-11:0,K 0,K  0,8  0,8  1,7  2,6  3,5  4,4   5,3    6,0
-9:0,K  0,8  0,7  1,7  2,6  3,6  4,5   5,4   6,3    7,0    	
-7:0,8  0,7  1,6  2,6  3,6  4,5  5,4   6,3    7,2  8,0   
-5:0,6  1,6  2,5  3,5  4,4  5,4  6,3   7,2    8,0   9,0  
-3:1,6  2,5  3,5  4,4  5,4  6,3  7,2   8,1   9,0  10,0 
-1:2,5  3,5  4,4  5,4  6,3  7,2  8,2   9,1  10,0  11,0
 0:3,5  4,4  5,4  6,3  7,2  8,2   9,1  10,0  11,0  12,0
 1:4,5  5,4  6,3  7,3  8,2  9,2  10,1  11,0  12,0  14,0
 3:5,4  6,3  7,3  8,2  9,2  10,2  11,1  12,0  14,0 16,0
 5:6,4  7,3  8,3  9,2  10,2  11,1  12,0  14,0 16,0 18,0
 7:7,4  8,3  9,2  10,2 11,1  12,1  14,0 16,0  18,0 K,0
 9:8,3  9,3  10,2 11,2  12,2  14,1 16,0  18,0 K,0  K,0
 11:9,3 10,2 11,2  12,2  14,1 16,1  18,0 K,0  K,0  K,0

#3rd attempt to visualize
#Format is E:L

    1     2    3    4    5    6     7    8     9     0
-11:1:(0,K) 2:(0,K)  3:(0,8)  4:(0,8)  5:(1,7)  6:(2,6)   7:(3,5)   8:(4,4)   9:(5,3)   10:(6,0)
-9:1:(0,K)  2:(0,8)  3:(0,7)  4:(1,7)  5:(2,6)  6:(3,6)   7:(4,5)   8:(5,4)   9:(6,3)   10:(7,0)    	
-7:1:(0,8)  2:(0,7)  3:(1,6)  4:(2,6)  5:(3,6)  6:(4,5)   7:(5,4)   8:(6,3)   9:(7,2)   10:(8,0)   
-5:1:(0,6)  2:(1,6)  3:(2,5)  4:(3,5)  5:(4,4)  6:(5,4)   7:(6,3)   8:(7,2)   9:(8,0)   10:(9,0)  
-3:1:(1,6)  2:(2,5)  3:(3,5)  4:(4,4)  5:(5,4)  6:(6,3)   7:(7,2)   8:(8,1)   9:(9,0)   10:(10,0) 
-1:1:(2,5)  2:(3,5)  3:(4,4)  4:(5,4)  5:(6,3)  6:(7,2)   7:(8,2)   8:(9,1)   9:(10,0)  10:(11,0)
 0:1:(3,5)  2:(4,4)  3:(5,4)  4:(6,3)  5:(7,2)  6:(8,2)   7:(9,1)   8:(10,0)  9:(11,0)  10:(12,0)
 1:1:(4,5)  2:(5,4)  3:(6,3)  4:(7,3)  5:(8,2)  6:(9,2)   7:(10,1)  8:(11,0)  9:(12,0)  10:(14,0)
 3:1:(5,4)  2:(6,3)  3:(7,3)  4:(8,2)  5:(9,2)  6:(10,2)  7:(11,1)  8:(12,0)  9:(14,0)  10:(16,0)
 5:1:(6,4)  2:(7,3)  3:(8,3)  4:(9,2)  5:(10,2  6:(11,1)  7:(12,0)  8:(14,0)  9:(16,0)  10:(18,0)
 7:1:(7,4)  2:(8,3)  3:(9,2)  4:(10,2) 5:(11,1) 6:(12,1)  7:(14,0)  8:(16,0)  9:(18,0)  10:(K,0)
 9:1:(8,3)  2:(9,3)  3:(10,)  4:(11,2) 5:(12,2) 6:(14,1)  7:(16,0)  8:(18,0)  9:(K,0)   10:(K,0)
 11:1(9,3)  2:(10,2) 3:(11,2) 4:(12,2) 5:(14,1) 6:(16,1)  7:(18,0)  8:(K,0)   9:(K,0)   10:(K,0)

keys = range(-11,12)

for i in keys:
   smalldct[i]=values[i]

values = ["Hi", "I", "am", "John", "and", "I", "live", "in", "Parsippany", "New", "Jersey", "in", "a", "really", "small", "blue", "house", "made", "out", "of", "wood", "metal," "and", "other", "materials"]


for i in keys:
   smalldct[i]=values[i]

for k,v in smalldct.items():
 print("{0}".format(v))

# nested dict 

nested_dict = { 'dictA': {'key_1': 'value_1'},
                'dictB': {'key_2': 'value_2'}}

people = {1: {'name': 'John', 'age': '27', 'sex': 'Male'},
          2: {'name': 'Marie', 'age': '22', 'sex': 'Female'}}

print(people)


smalldct = {-11:{1:(0,100),2:(0,100),3:(0,8),4:(0,8),5:(1,7),6:(2,6),7:(3,5),8:(4,4),9:(5,3),10:(6,0)}, 
-9:{1:(0,100),2:(0,8),3:(0,7),4:(1,7),5:(2,6),6:(3,6),7:(4,5),8:(5,4),9:(6,3),10:(7,0)},
-7:{1:(0,8),2:(0,7),3:(1,6),4:(2,6),5:(3,6),6:(4,5),7:(5,4),8:(6,3),9:(7,2),10:(8,0)},
-5:{1:(0,6),2:(1,6),3:(2,5),4:(3,5),5:(4,4),6:(5,4),7:(6,3),8:(7,2),9:(8,0),10:(9,0)},
-3:{1:(1,6),2:(2,5),3:(3,5),4:(4,4),5:(5,4),6:(6,3),7:(7,2),8:(8,1),9:(9,0),10:(10,0)},
-1:{1:(2,5),2:(3,5),3:(4,4),4:(5,4),5:(6,3),6:(7,2),7:(8,2),8:(9,1),9:(10,0),10:(11,0)},
0:{1:(3,5),2:(4,4),3:(5,4),4:(6,3),5:(7,2),6:(8,2),7:(9,1),8:(10,0),9:(11,0),10:(12,0)},
1:{1:(4,5),2:(5,4),3:(6,3),4:(7,3),5:(8,2),6:(9,2),7:(10,1),8:(11,0),9:(12,0),10:(14,0)},
3:{1:(5,4),2:(6,3),3:(7,3),4:(8,2),5:(9,2),6:(10,2),7:(11,1),8:(12,0),9:(14,0),10:(16,0)},
5:{1:(6,4),2:(7,3),3:(8,3),4:(9,2),5:(10,2),6:(11,1),7:(12,0),8:(14,0),9:(16,0),10:(18,0)},
7:{1:(7,4),2:(8,3),3:(9,2),4:(10,2),5:(11,1),6:(12,1),7:(14,0),8:(16,0),9:(18,0),10:(100,0)},
9:{1:(8,3),2:(9,3),3:(10,),4:(11,2),5:(12,2),6:(14,1),7:(16,0),8:(18,0),9:(100,0),10:(100,0)},
11:{1:(9,3),2:(10,2),3:(11,2),4:(12,2),5:(14,1),6:(16,1),7:(18,0),8:(100,0),9:(100,0),10:(100,0)}}

# some working examples

smalldct = {-11:{1:(0,100),2:(0,100),3:(0,8),4:(0,8),5:(1,7),6:(2,6),7:(3,5),8:(4,4),9:(5,3),10:(6,0)}}

print(smalldct[-11])
{1: (0, 100), 2: (0, 100), 3: (0, 8), 4: (0, 8), 5: (1, 7), 6: (2, 6), 7: (3, 5), 8: (4, 4), 9: (5, 3), 10: (6, 0)}

print(smalldct[-11][1] )
(0, 100)


# after loading in whole dict
### Notes on getting combat damage values
# Combat Ratio 0, roll of 5
print(smalldct[0][5])
Enemy takes 7 dmg, Lone Wolf takes 2 damage
(7, 2)

jamie=smalldct[0][5]

jamie[1]
2

jamie[0]
7

#Notes on setting the valid answers variable

In [49]: valid_answers=range(1,11)

In [50]: 1 in valid_answers
Out[50]: True

In [51]: 10 in valid_answers
Out[51]: True

In [52]: 0 in valid_answers
Out[52]: False

In [53]: 11 in valid_answers
Out[53]: False

print("Enter Lone Wolf's current endurance points.")
lw_endurance_start = int(input(prompt))

print("Enter Lone Wolf's combat skill.")
lw_cs = int(input(prompt))

print("Enter enemy's endurance points.")
op_endurance_start = int(input(prompt))

print("Enter enemy's combat skill.")
op_cs = int(input(prompt))


In [66]: combat_ratio = lw_cs-op_cs

In [67]: print(combat_ratio)
-5

print("Enter your roll.")
my_roll = int(input(prompt))

print(smalldct[combat_ratio][my_roll])
(5, 4)

#NO
print("Enemy takes: " + damage_values[0] + " damage")
print("Lone Wolf takes: " + damage_values[1] + " damage")

#NO
print("Enemy takes: damage_values[0] damage")
print("Lone Wolf takes: damage_values[1] damage")

print("Enemy takes: " + str(damage_values[0]) + " damage")
print("Lone Wolf takes: " + str(damage_values[1]) + " damage")


# Creating the loop



# does not run 8/10 21:09 UTC
while my_roll != 'quit':
print("Enter Lone Wolf's current endurance points.")
lw_endurance_start = int(input(prompt))
print("Enter Lone Wolf's combat skill.")
lw_cs = int(input(prompt))
print("Enter enemy's endurance points.")
op_endurance_start = int(input(prompt))
print("Enter enemy's combat skill.")
op_cs = int(input(prompt))
round_count=0
lw_endurance=lw_endurance_start
op_endurance=op_endurance_start
combat_ratio = lw_cs-op_cs
if combat_ratio  % 2 == 0:
  combat_ratio+=1
print("Begin combat.")
	while lw_endurance >=0 and op_endurance >=0:
		print("Enter your roll.")
		my_roll = int(input(prompt))
		round_count+=1
		if check_input(my_roll):
				damage_values=(smalldct[combat_ratio][my_roll])
				op_endurance=op_endurance-(damage_values[0])
				lw_endurance=lw_endurance-(damage_values[1])
				print("Enemy takes: " + str(damage_values[0]) + " damage =====> Enemy Endurance Points: " + str(op_endurance))
				print("Lone Wolf takes: " + str(damage_values[1]) + " damage =====> Lone Wolf Endurance Points: " + str(lwe))

my_roll=''                                                            
while my_roll != 'quit':                                              
    print("Enter Lone Wolf's current endurance points.")              
    lw_endurance_start = int(input(prompt))                           
    print("Enter Lone Wolf's combat skill.")                          
    lw_cs = int(input(prompt))                                        
    print("Enter enemy's endurance points.")                          
    op_endurance_start = int(input(prompt))                           
    print("Enter enemy's combat skill.")                              
    op_cs = int(input(prompt))                                        
    round_count=1                                                     
    lw_endurance=lw_endurance_start                                   
    op_endurance=op_endurance_start                                   
    combat_ratio = lw_cs-op_cs                                        
#Apply combat skill math if nonnegative and/or even to accomodate table                                                                     
    if combat_ratio > 0 and combat_ratio  % 2 == 0:                   
        combat_ratio-=1                                           
    elif combat_ratio < 0 and combat_ratio % 2 == 0:                  
        combat_ratio+=1  
    elif combat_ratio < 0 and combat_ratio % 2 == 0:    
        combat_ratio+=1                                           
    print("Begin combat.")                                            
    while True:                                                       
        print("Round " + str(round_count))  
        print("Enter your roll.")                                     
        my_roll = int(input(prompt))
        if check_input(my_roll):                                                                                
            damage_values=(smalldct[combat_ratio][my_roll])
#        if (damage_values[0]=100:             
#            op_endurance=op_endurance-op_endurance
#       else:
            op_endurance=op_endurance-(damage_values[0])
#        if (damage_values[1])=100:             
#            lw_endurance=lw_endurance-lw_endurance
#        else:
            lw_endurance=lw_endurance-(damage_values[1])         
            if op_endurance <= 0:                     
                print("Enemy takes: " + str(damage_values[0]) + " damage =====> Enemy Endurance Points:  " + str(op_endurance))                 
                print("Lone Wolf takes: " + str(damage_values[1]) + " damage =====> Lone Wolf Endurance Points: " + str(lw_endurance))
                print("Lone Wolf hath slain the enemy!")
                break                                            
            elif lw_endurance <=0:                                        
                print("Enemy takes: " + str(damage_values[0]) + " damage =====> Enemy Endurance Points:  " + str(op_endurance))                 
                print("Lone Wolf takes: " + str(damage_values[1]) + " damage =====> Lone Wolf Endurance Points: " + str(lw_endurance))
                print("The enemy hath bested Lone Wolf!")                 
                break                                                     
            else:                                                         
                print("Enemy takes: " + str(damage_values[0]) + " damage =====> Enemy Endurance Points:  " + str(op_endurance))                 
                print("Lone Wolf takes: " + str(damage_values[1]) + " damage =====> Lone Wolf Endurance Points: " + str(lw_endurance))
                round_count+=1



### Code
#define prompt - 
prompt = "\n  > "

#!/usr/bin/env python3

#module imports
import random

#define variables
correct_count = 0
known_count = 0
wrong_ans={}
known_ans={}
quiz_used=[]
smalldct={}
valid_answers=valid_answers=range(1,11)
my_guess = ""

def check_input(current_roll):
    """
    Checks input and handles exceptions
    """
    if current_roll in valid_answers:
        return True
    if not current_roll in valid_answers and current_roll != "quit":
        print("Valid roll values are numbers 1 - 10.")

